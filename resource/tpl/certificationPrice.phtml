<div class="page-header">
    <h2>Certification Price</h2>
</div>

<h3>Metrics</h3>
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Remark</th>
            <th>Value</th>
            <th>Factor</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Code Coverage</td>
            <td>Has to be > 90%. Values below result in manual work when testing.</td>
            <td><?php echo $data->oCertificationResult->getCertificationRule('Code Coverage')->getValue() ?>%</td>
            <td><?php echo $data->oCertificationResult->getCertificationRule('Code Coverage')->getFactor() ?></td>
        </tr>
        <tr>
            <td>C.R.A.P Index</td>
            <td>The Change Risk Analysis and Predictions (CRAP) index of a function or method uses cyclomatic complexity and code coverage from automated tests to help estimate the effort and risk associated with maintaining legacy code. A CRAP index over 30 is a good indicator of crappy code.</td>
            <td><?php echo $data->oCertificationResult->getCertificationRule('C.R.A.P Index')->getValue() ?></td>
            <td><?php echo $data->oCertificationResult->getCertificationRule('C.R.A.P Index')->getFactor() ?></td>
        </tr>
        <tr>
            <td>NPath Complexity</td>
            <td>HThe NPATH metric computes the number of possible execution paths through a function. It takes into account the nesting of conditional statements and multi-part boolean expressions (e.g., A && B, C || D, etc.).
                A NPATH Complexity over 200 is a good candidate for a closer decomposition.</td>
            <td><?php echo $data->oCertificationResult->getCertificationRule('NPath Complexity')->getValue() ?></td>
            <td><?php echo $data->oCertificationResult->getCertificationRule('NPath Complexity')->getFactor() ?></td>
        </tr>
        <tr>
            <td>Cyclomatic Complexity</td>
            <td>Checks cyclomatic complexity against a specified limit. The complexity is measured by the number of if, while, do, for, ?:, catch, switch, case  statements, and operators && and || (plus one) in the body of a constructor, method, static initializer, or instance initializer. It is a measure of the minimum number of possible paths through the source and therefore the number of required tests. Generally 1-4 is considered good, 5-7 ok, 8-10 consider re-factoring, and 11+ re-factor now!</td>
            <td><?php echo $data->oCertificationResult->getCertificationRule('Cyclomatic Complexity')->getValue() ?></td>
            <td><?php echo $data->oCertificationResult->getCertificationRule('Cyclomatic Complexity')->getFactor() ?></td>
        </tr>
        <tr>
            <td colspan="3"></td>
            <td><b><?php echo $data->oCertificationResult->getFactor() ?></b></td>
        </tr>
    </tbody>
</table>

<h3>Price</h3>
<table class="table">
    <thead>
    <tr>
        <th>Type</th>
        <th>Remark</th>
        <th>Value</th>
    </tr>
    </thead>
    <tbody>
        <tr>
            <td>Basic factor price</td>
            <td>The basic factor price is multiplied by the determined software quality factor.</td>
            <td>119&euro;</td>
        </tr>
        <tr>
            <td>Total factor price</td>
            <td>Multiply basic factor price by the total factor price</td>
            <td><?php echo $data->oCertificationResult->getFactor() * 200 ?>&euro;</td>
        </tr>
<!--        <tr>-->
<!--            <td>Basic price software quality</td>-->
<!--            <td>Per certification attempt (or check for attempt or pre-check). 1 feedback cycle included.</td>-->
<!--            <td>250â‚¬</td>-->
<!--        </tr>-->
<!--        <tr>-->
<!--            <td>Certification flat charge</td>-->
<!--            <td>This covers technical code reviewing and module testing based on OXID eSales module certification rules (OXID_Module_Certification_Rules.pdf)</td>-->
<!--            <td>960&euro;</td>-->
<!--        </tr>-->
        <tr>
            <td colspan="2"><b>Total Certification Price</b></td>
            <td><b><?php echo $data->oCertificationResult->getPrice() ?>&euro;</b></td>
        </tr>
    </tbody>
</table>